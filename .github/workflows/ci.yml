name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Zig (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          PY=$(command -v python3 || command -v python)
          URL=$($PY - <<'PY'
import json,urllib.request,platform,sys
plat='x86_64-linux'
data=json.load(urllib.request.urlopen('https://ziglang.org/download/index.json',timeout=30))
src=data.get('master') or data.get('dev')
print(src[plat]['tarball'])
PY
          )
          echo "Downloading $URL"
          mkdir -p $HOME/zig && cd $HOME/zig
          curl -L --fail -o zig.tar.xz "$URL"
          tar -xJf zig.tar.xz
          DIR=$(find . -maxdepth 1 -type d -name 'zig-*' | head -n1)
          echo "$HOME/zig/$DIR" >> $GITHUB_PATH
          zig version

      - name: Install Zig (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          PY=$(command -v python3 || command -v python)
          URL=$($PY - <<'PY'
import json,urllib.request,platform
arch=platform.machine()
plat='aarch64-macos' if arch=='arm64' else 'x86_64-macos'
data=json.load(urllib.request.urlopen('https://ziglang.org/download/index.json',timeout=30))
src=data.get('master') or data.get('dev')
print(src[plat]['tarball'])
PY
          )
          echo "Downloading $URL"
          mkdir -p $HOME/zig && cd $HOME/zig
          curl -L --fail -o zig.tar.xz "$URL"
          tar -xJf zig.tar.xz
          DIR=$(find . -maxdepth 1 -type d -name 'zig-*' | head -n1)
          echo "$HOME/zig/$DIR" >> $GITHUB_PATH
          zig version


      - name: Check formatting
        run: zig fmt --check src/

      - name: Report binary size
        run: |
          ls -lh zig-out/bin/zigscan || true
          printf "bytes=" && stat -c %s zig-out/bin/zigscan 2>/dev/null || stat -f %z zig-out/bin/zigscan 2>/dev/null || true

      - name: Size threshold warning (non-fatal)
        run: |
          python3 - <<'PY'
          import os, sys
          p = 'zig-out/bin/zigscan'
          if not os.path.exists(p):
              print('size-check: binary not found (skipping)')
              sys.exit(0)
          sz = os.stat(p).st_size
          # Conservative threshold for CI debug/default builds; warn-only
          THRESHOLD = 12000000  # 12 MB
          print(f'size-check: {sz} bytes (threshold={THRESHOLD})')
          if sz > THRESHOLD:
              print(f'WARNING: zigscan binary size {sz} exceeds threshold {THRESHOLD} (warn-only)')
          PY

      - name: Build
        run: zig build

      - name: Performance smoke test (localhost 80-555, c=100, timeout=200ms, <15s, retry x1)
        if: runner.os == 'Linux'
        run: |
          python3 - <<'PY'
          import time, subprocess, sys
          def once():
              start = time.time()
              code = subprocess.call(["./zig-out/bin/zigscan","-t","127.0.0.1","-r","80-555","-c","100","--timeout","200"], stdout=subprocess.DEVNULL)
              dur = int((time.time()-start)*1000)
              print(f"duration={dur}ms, code={code}")
              return code == 0 and dur <= 15000
          if not once():
              time.sleep(1)
              if not once():
                  print("FAIL: smoke test (localhost) unstable after retry")
                  sys.exit(1)
          PY

      - name: Performance smoke test (103.235.46.115 ports 80,443, c=100, timeout=200ms, <15s, retry x1)
        if: runner.os == 'Linux'
        run: |
          python3 - <<'PY'
          import time, subprocess, sys
          def once():
              start = time.time()
              code = subprocess.call(["./zig-out/bin/zigscan","-t","103.235.46.115","-p","80,443","-c","100","--timeout","200"], stdout=subprocess.DEVNULL)
              dur = int((time.time()-start)*1000)
              print(f"duration={dur}ms, code={code}")
              return code == 0 and dur <= 15000
          if not once():
              time.sleep(1)
              if not once():
                  print("FAIL: smoke test (remote) unstable after retry")
                  sys.exit(1)
          PY

  cross-build:
    name: Cross-build ${{ matrix.target }} on ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [
          "x86_64-linux-gnu",
          "aarch64-linux-gnu",
          "arm-linux-gnueabihf",
          "x86-linux-gnu",
          "riscv64-linux-gnu",
          "x86_64-linux-musl",
          "aarch64-linux-musl"
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Zig (manual)
        shell: bash
        run: |
          set -euo pipefail
          PY=$(command -v python3 || command -v python)
          URL=$($PY - <<'PY'
import json,urllib.request
plat='x86_64-linux'
data=json.load(urllib.request.urlopen('https://ziglang.org/download/index.json',timeout=30))
src=data.get('master') or data.get('dev')
print(src[plat]['tarball'])
PY
          )
          echo "Downloading $URL"
          mkdir -p $HOME/zig && cd $HOME/zig
          curl -L --fail -o zig.tar.xz "$URL"
          tar -xJf zig.tar.xz
          DIR=$(find . -maxdepth 1 -type d -name 'zig-*' | head -n1)
          echo "$HOME/zig/$DIR" >> $GITHUB_PATH
          zig version

      - name: Cross build
        run: |
          if [[ "${{ matrix.target }}" == *"linux-musl"* ]]; then
            zig build -Dtarget=${{ matrix.target }} -Doptimize=ReleaseSafe -Dstatic=true
          else
            # Try static first; if unsupported, fallback to dynamic
            if zig build -Dtarget=${{ matrix.target }} -Doptimize=ReleaseSafe -Dstatic=true; then
              echo "static link succeeded"
            else
              echo "static link unsupported; falling back to dynamic"
              zig build -Dtarget=${{ matrix.target }} -Doptimize=ReleaseSafe
            fi
          fi

      # Cross-built binaries are not runnable on the host; we only verify build succeeds

  experimental-cross-build:
    name: EXP Cross-build ${{ matrix.target }} (static-preferred)
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        target: [
          "x86_64-windows",
          "aarch64-windows",
          "x86-windows",
          "x86_64-freebsd",
          "aarch64-freebsd",
          "x86_64-openbsd",
          "aarch64-openbsd",
          "x86_64-netbsd",
          "aarch64-netbsd",
          "loongarch64-linux-gnu",
          "mips-linux-musl",
          "mipsel-linux-musl",
          "mips64-linux-musl",
          "mips64el-linux-musl",
          "mips-linux-gnu",
          "mipsel-linux-gnu",
          "mips64-linux-gnu",
          "mips64el-linux-gnu",
          "powerpc64le-linux-gnu",
          "s390x-linux-gnu",
          "riscv32-linux-gnu",
          "riscv64-linux-musl",
          "arm-linux-musleabihf"
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Zig (manual)
        shell: bash
        run: |
          set -euo pipefail
          PY=$(command -v python3 || command -v python)
          URL=$($PY - <<'PY'
import json,urllib.request
plat='x86_64-linux'
data=json.load(urllib.request.urlopen('https://ziglang.org/download/index.json',timeout=30))
src=data.get('master') or data.get('dev')
print(src[plat]['tarball'])
PY
          )
          echo "Downloading $URL"
          mkdir -p $HOME/zig && cd $HOME/zig
          curl -L --fail -o zig.tar.xz "$URL"
          tar -xJf zig.tar.xz
          DIR=$(find . -maxdepth 1 -type d -name 'zig-*' | head -n1)
          echo "$HOME/zig/$DIR" >> $GITHUB_PATH
          zig version

      - name: Cross build (static preferred with fallback)
        shell: bash
        run: |
          T="${{ matrix.target }}"
          if [[ "$T" == *"-linux-musl"* ]]; then
            zig build -Dtarget="$T" -Doptimize=ReleaseSafe -Dstatic=true
          else
            if zig build -Dtarget="$T" -Doptimize=ReleaseSafe -Dstatic=true; then
              echo "static link succeeded"
            else
              echo "static link unsupported; falling back to dynamic"
              zig build -Dtarget="$T" -Doptimize=ReleaseSafe
            fi
          fi

  lint:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Zig (manual)
        shell: bash
        run: |
          set -euo pipefail
          PY=$(command -v python3 || command -v python)
          URL=$($PY - <<'PY'
import json,urllib.request
plat='x86_64-linux'
data=json.load(urllib.request.urlopen('https://ziglang.org/download/index.json',timeout=30))
src=data.get('master') or data.get('dev')
print(src[plat]['tarball'])
PY
          )
          echo "Downloading $URL"
          mkdir -p $HOME/zig && cd $HOME/zig
          curl -L --fail -o zig.tar.xz "$URL"
          tar -xJf zig.tar.xz
          DIR=$(find . -maxdepth 1 -type d -name 'zig-*' | head -n1)
          echo "$HOME/zig/$DIR" >> $GITHUB_PATH
          zig version

      - name: Check formatting
        run: zig fmt --check src/
